public TreeNode sortedArrayToBST(int[] nums) {
        int len=nums.length;
        int len1=0;
        if(len==0)return null;
        if(len==1){TreeNode tmp=new TreeNode(nums[0]);return tmp;}
        TreeNode root=new TreeNode(nums[len/2]);
        if(len==2){ TreeNode c=new TreeNode(nums[0]);root.left=c;return root;}
        if(len>2)
        {if(len%2==1)
        {len1=len-len/2-1;
           }
        else 
        {len1=len-len/2;
      }
         int[] a=new int[len1];
         for(int i=0;i<len1;i++)
             a[i]=nums[i];
        int[] b=new int[len-len/2-1];
             for(int i=len/2+1;i<len;i++)
             {
                 b[i-len/2-1]=nums[i];
             }
         TreeNode tmp1=sortedArrayToBST(a);
         TreeNode tmp2=sortedArrayToBST(b);
         root.left=tmp1;
         root.right=tmp2;
        }
        return root;
        
         
    }




class Solution {//faster *others
    public TreeNode sortedArrayToBST(int[] nums) {
        return buildTree(nums, 0, nums.length - 1);
    }
    
    private TreeNode helper(int[] nums, int start, int end) {
        if (start > end) {
            System.out.println(start + ", " + end);
            return null;
        }
        
        int mid = (end + start) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = helper(nums, start, mid - 1);
        root.right = helper(nums, mid + 1, end);
        
        return root;
    }
    
    private TreeNode buildTree(int[] num, int start, int end) {
        if (start > end) {
            return null;
        }

        TreeNode node = new TreeNode(num[(start + end) / 2]);
        node.left = buildTree(num, start, (start + end) / 2 - 1);
        node.right = buildTree(num, (start + end) / 2 + 1, end);
        return node;
    }
}
