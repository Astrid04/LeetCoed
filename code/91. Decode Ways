class Solution {//我的方法，用了DP，但是速度比较慢
    public int numDecodings(String s) {
        int len=s.length();
        if(len==0 )return 0;
        if(len==1 && s.charAt(0)!='0')return 1;
        if(s.charAt(0)=='0')return 0;
        int num=10*(s.charAt(0)-'0')+(s.charAt(1)-'0');
        if(len==2)
        {
            if(s.charAt(1)=='0')
            {
                if(num<=26)return 1;
                else return 0;
            }
            if(num<=26 && s.charAt(1)!='0')return 2;
            else return 1;
        }
        int ans=0;
        if(num<=26)
        {
            ans=numDecodings(s.substring(1))+numDecodings(s.substring(2));
        }
        else ans=numDecodings(s.substring(1));
        return ans;
    }
}

public class Solution {//同样用DP，人家的方法速度就比较快
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) return 0;
        
        int[] memo = new int[n+1];
        memo[n]  = 1;
        memo[n-1] = s.charAt(n-1) != '0' ? 1 : 0;
        
        for (int i = n - 2; i >= 0; i--)
            if (s.charAt(i) == '0') continue;
            else memo[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? memo[i+1]+memo[i+2] : memo[i+1];
        
        return memo[0];
    }
}
