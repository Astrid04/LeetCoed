 public List<String> letterCombinations(String digits) {
        List<String> answer=new ArrayList<String>();
        int len=digits.length();
        if(len==0)return answer;
        List<String> num=new ArrayList<String>();
        num.add("abc");
        num.add("def");
        num.add("ghi");
        num.add("jkl");
        num.add("mno");
        num.add("pqrs");
        num.add("tuv");
        num.add("wxyz");
        String tmp=num.get((int)(digits.charAt(0)-'2'));
        int len1=tmp.length(); 
        if(len==1)
        {
            for(int i=0;i<len1;i++)
        { String b=String.valueOf(tmp.charAt(i));
                answer.add(b);}
            return answer;
        }
        List<String> get=letterCombinations(digits.substring(1));
        System.out.println("get:  "+get);
        int len2=get.size();
        System.out.println(len2);
        for(int i=0;i<len1;i++)
        {
            
            
            for(int j=0;j<len2;j++)
            {
                StringBuilder a=new StringBuilder(String.valueOf(tmp.charAt(i)));
                a.append(get.get(j));
                String t=new String(a);
                answer.add(t);
            }
        }
        return answer;
    }




private static final String[] DICTIONARY = {// *others
            " ",
            "",
            "abc",
            "def",
            "ghi",
            "jkl",
            "mno",
            "pqrs",
            "tuv",
            "wxyz",

    };

    static List<String> res = new ArrayList<>();

    public List<String> letterCombinations(String digits) {
        if(digits == null || digits.equals("")){
            return res;
        }
        
        res.clear();

        doCombination(digits, 0, "");
        return res;
    }

    private void doCombination(String digits, int index, String s) {
        if(index == digits.length()){
            res.add(s);
            return;
        }

        char current = digits.charAt(index);

        String tmp = DICTIONARY[current - '0'];
        
        for(int i = 0; i < tmp.length(); i++){
            doCombination(digits, index + 1, s + tmp.charAt(i));
        }
    }
